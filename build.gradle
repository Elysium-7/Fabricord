plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
}

loom {
    runs {
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=fabricord"
 
			runDir "build/datagen"
		}
	}
}

configurations {
	includeInJar
}

sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}
dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	includeInJar 'org.yaml:snakeyaml:2.0'
	includeInJar 'net.dv8tion:JDA:5.0.0-beta.12'
	implementation 'net.dv8tion:JDA:5.0.0-beta.12'
	implementation 'org.yaml:snakeyaml:2.0'
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}


jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}" }
	}

	from(configurations.includeInJar.collect { it.isDirectory() ? it : zipTree(it) })

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	exclude("oshi.**")
	exclude("oshi/**")
}